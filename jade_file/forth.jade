doctype html
html
  head
    meta(charset='utf-8')
    link(rel='stylesheet' href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css')
    link(rel="stylesheet" href="/reveal/css/reveal.css")
    link(rel="stylesheet" href="/reveal/css/theme/white.css")
    link( rel="stylesheet" href="/reveal/lib/css/zenburn.css")
    script(src='https://code.jquery.com/jquery-3.1.0.min.js')
    script.
      $(document).ready( function () {
        $('dl.directory dd').addClass('text-muted')
        })

    script.
      html1 = `
      <!DOCTYPE html> // html5 선언
        <html>
          <head> ... </head>
          <body> ... </body>
        </html>`
  body
    div.reveal
      div.slides
        section
          h1 node로 웹서비스 만들기
          h3 익게이
        section
          p 오늘은 view template에 대해서 알아봅시다.
          p view라고 하니까 뭔가 보여주는 것과 상관이 있겠죠?
          p.text-info 여태까진 우리 서버가 멋이 없었는데, 오늘 좀 멋지게 놀아봅시다!
        section
          p 일단 여러분이 알아야 할 상식은요, html입니다.
          p html은 웹에서 정보를 주고받을 때 표준으로 사용하는 형식입니다.
          p 즉, <span class='text-info'>공용어</span>라는 소리죠
        section
          p 하지만 html을 자세히 다루기엔 지면이 넘나 부족합니다
          p 아래의 좋은 레퍼런스들이 있으니 꼭 참고하시구, 오늘은 기초만 하겠습니다
          dl
            dt html reference
            dd
              a(href='https://www.w3.org/TR/html5/') html5 공식 표준
            dd
              a(href='http://www.w3schools.com/html/') w3schools html 튜토리얼
            dd
              a(href='https://www.codecademy.com/learn/make-a-website') codecademy html&css
        section
          section
            h3 간단한 html강의(화살표 아래로)
            p html은 머리,몸통으로 이뤄져 있습니다.
            pre
              code(data-trim data-escape).
                &lt;!DOCTYPE html&gt; <!-- html5 &#49440;&#50616; -->
                &lt;html&gt;
                    &lt;head&gt; ... &lt;/head&gt;
                    &lt;body&gt; ... &lt;/body&gt;
                &lt;/html&gt;
          section
            p 머리에는 인코딩, 제목, 외부 라이브러리등 정보를 보여주기 위한 준비를 합니다
            pre
              code.
                &lt;head&gt;
                  &lt;title&gt; &#45208;&#51032; &#50937;&#44060;&#48156; &lt;/title&gt;
                  &lt;meta charset='utf-8' name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
                  <!-- encoding:utf-8, &#47784;&#48148;&#51068; &#52828;&#54868;&#51201;&#51064; &#54872;&#44221;&#51012; &#50948;&#54644; device-width &#49444;&#51221; -->
                  &lt;script src=&quot;https://code.jquery.com/jquery-1.12.4.min.js&quot;&gt;&lt;/script&gt; <!--jquery &#48520;&#47084;&#50740;-->
                  &lt;link rel='stylesheet' type='text/css' href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css'&gt;
                  <!--bootstrap css &#48520;&#47084;&#50740;-->
                &lt;/head&gt;
          section
            p 몸통에는 우리가 보여주고 싶은 정보를 적습니다
            pre
              code.
                &lt;body&gt;
                    &lt;h1&gt; &#45236; &#54856;&#54168;&#51060;&#51648; &lt;/h1&gt; <!-- &#51228;&#47785; -->
                    &lt;p&gt; &#45236; &#54856;&#54168;&#51060;&#51648;&#50640; &#50724;&#49888;&#44163;&#51012; &#54872;&#50689;&#54633;&#45768;&#45796; 낯선이어; &lt;/p&gt; <!--&#47928;&#45800;-->

                    &lt;h3&gt; &#54856;&#54168;&#51060;&#51648;&#50640;&#49436; &#54624; &#49688; &#51080;&#45716; &#44163; &lt;/h3&gt; <!-- &#48512;&#51228;&#47785;-->
                    &lt;ul&gt; <!-- unordered list(&#48264;&#54840; &#50504;&#47588;&#44200;&#51652; &#47532;&#49828;&#53944;)-->
                      &lt;li&gt;&#50500;&#47924;&#44163;&#46020;&lt;/li&gt;
                      &lt;li&gt;&#50630;&#51020; &lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/body&gt;
          section
            p 태그에는 다양한 속성이 붙을 수 있습니다
            pre
              code.
                &lt;h1 class='header1' color='red'&gt;&#45208;&#45716; &#48744;&#44036;&#49353; &lt;/h1&gt;
          section
            p 특히, class와 id라는 속성은 매우 중요합니다
            p css나 javascript가 class나 id로 해당 tag의 내용물을 바꿀 수 있기 때문이죠
            pre
              code.
                &lt;p class='chapter3' id='3rd-paragraph'&gt; ... &lt;/p&gt;
            p.text-muted css로 빨갛게 칠하기
            pre
              code.
                p.chapter3#3rd-paragraph {
                  color:red;
                  }
            p.text-muted javascript로 p안에 내용 집어넣기
            pre
              code.
                var paragraphThree = document.getElementById('3rd-paragraph')
                paragraphThree.innerHTML = 'hello'
        section
          p 자, 그러면 과연 template engine이란 무엇일까요?
          p.fragment html을 동적으로 바꿔주는 녀석입니다.
          p.fragment 그게 무슨 소리냐구요?
        section
          p 포털 로그인 창을 떠올려 봅시다.
          img(data-src='http://cfile23.uf.tistory.com/image/2703B13653B671142E14BF')
          p id에 따라 수천만명 회원들에게 다른 정보를 보여줘야 합니다
          p 그렇다면 html문서도 수천만개가 필요하겠네요?
        section
          p 눈치 채셨겠지만, 그렇지 않습니다.
          p.fragment template engine은, 이미 만들어진 문서(template)에
          p.fragment.text-info 알맞는 데이터를 묶어주는 역할을 합니다.
          p.fragment 위의 예제에서는 회원 id와 template를 묶어줘야겠군요.
        section
          p 우리 이제부터 c9.io 사용하기로 했죠?
          p 저번시간에 만들어놓은 node서버 다시한번 열어보세요
        section
          section
            p 자, 우선 index.html이라는 파일을 만들고 아래와 같이 입력해보세요
            p.text-muted 잘 안보이면 화살표 아래
            img(data-src='http://i.imgur.com/sClBk5e.png')
          section
            pre
              code.
                &lt;!DOCTYPE html&gt;
                &lt;html&gt;
                &lt;head&gt;
                    &lt;title&gt;nodejs &#49892;&#49845;&lt;/title&gt;
                    &lt;meta charset='utf-8'&gt;
                    &lt;link rel='stylesheet' type='text/css' href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css'&gt;
                &lt;/head&gt;

                &lt;body&gt;
                    &lt;div class='container'&gt;
                        &lt;div class='jumbotron'&gt;
                            &lt;h1 class='text-center'&gt; &#54872;&#50689;&#54633;&#45768;&#45796;, {{id}} &#45784;!&lt;/h1&gt;
                            &lt;p class='text-center'&gt; &#51648;&#44552; &#45216;&#50472;&#45716;{{ weather }}&#54616;&#45348;&#50836;!&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;
                &lt;/body&gt;
                &lt;/html&gt;
        section
          section
            p 그 다음, server.js에 아래와 같이 입력해보세요(스크롤 있습니다)
            p.text-muted 정규식에 대한 더 자세한 설명은 화살표 아래로
            pre
              code.
                var fs = require('fs')

                function app (req,res){
                      var template = fs.readFileSync('index.html')
                      var rendered = templateEngine(template, {id:'seiyon', weather:'snow'})
                      // template에 data를 묶음
                      res.write(rendered)
                      res.end()
                }

                function templateEngine (template,data){
                      if (typeof data != 'object')//data가 json이 아니면 error
                            throw (new Error('invalid data type(data must be json)'))
                      template = String(template)
                      template = template.replace(/\{\{\s*(\w*)\s*\}\}/g,(a,b) => {return data[b]})
                      /*
                            정규식 설명: {{(공백)[글자](공백)}}  이렇게 생긴 녀석과 매치됨
                                         글자는 그룹 설정해놓음 => 뒤에 b라는 변수로 받을 수 있음.
                                         / ~ /g 에서 g는 매치되는 모든 문자를 바꾸겠다는 의미임(g없으면 1개만 바뀜)
                            replace(정규식, function(a,b){.. return ..})
                                  정규식과 매치되는 문자를 뒤에 함수의 return값으로 바꿔버림.
                                  a는 매치되는 전체 문자, b는 그룹 설정해둔 문자.
                      */

                      return template;
                }

                require('http').createServer(app) // 위의 function app이 변수로 입력됨.
                               .listen(process.env.PORT, ()=>console.log('good'))
                /* 이 표현은 지금껏 사용해왔던
                      var server = require('http').createServer; server( (req,res)=> ..)
                      의 단축된 표현임. 의미는 동일함
                */
          section
            p 정규식 설명(예시 위주)
            pre
              code.
                    '{{ hohoho }}'.match(/\{\{\s*(\w*)\s*\}\}/)
                      //output: ['{{ hohoho }}','hohoho']
                    '{{id}}'.match(/\{\{\s*(\w*)\s*\}\}/)
                      //output: ['{{id}}','id']
                    data={id:'me'}
                    data['id']
                      //output:'me'
                    '{{id}}'.replace(/\{\{\s*(\w*)\s*\}\}/,(a,b)=>{return b})
                      //output:'id'
                      //설명: 원래 문자열을 그룹으로 지정해둔 id로 바꿔버림,
                      //그룹이란? () 모양으로 감싼 것. 정규식에서 패턴을 기억하기 위해 사용
                    '{{id}}'.replace(/\{\{\s*(\w*)\s*\}\}/,(a,b)=>{return data[b]})
                      //output: 'me'
                      //그룹 설정된 패턴(id)가 data[b]의 b에 들어가서 data['id']와 같은 표현이 됨.
                      //data['id']는 'me'이므로 'me'로 바뀜.
        section
          p 그리고 나서 run을 눌러봅시다, 어떤가요?
          p 아래와 같이 표시되나요?
          img(data-src='http://i.imgur.com/0pE2rkS.png')
        section
          p 축하합니다!
          h3.fragment 방금 우리는 template에 데이터를 묶는 engine을 만들었어요!
        section
          p index.html에서 {{}} 이런식으로 특별한 기호를 써준 이유는,
          p template engine에게 이 부분을
          p.fragment data와 묶어줘야 한다고 <b>지시해주기 위함이죠.</b>
          p.fragment 많은 template engine에서
          p.fragment {{}} 나 {% %} 등의 기호를 위와같은 이유로 사용합니다.
        section
          p 물론, 실제 개발을 할 때에는
          p 이미 만들어져 있는 template engine을 쓸 것입니다.
          p node에선 아래 두 엔진이 매우 유명해요
          div.jumbotron
            dl
              dt notable template engine
              dd
                a(href='http://jade-lang.com/') pug(jade)
              dd
                a(href='http://www.embeddedjs.com/') ejs
          p.text-muted.fragment 여러분이 보고계신 이 슬라이드도 pug(jade)로 만들었어요.
        section
          p 지금까지 잘 따라오셨다면 여러분은,
          p.fragment <b>url을 처리하는 방법</b>
          p.fragment <b>데이터를 어떻게 저장하는지(csv)</b>
          p.fragment <b>html을 어떻게 동적으로 바꾸는지(template Engine)</b>
          p.fragment 이렇게 배우셨습니다.
        section
          p 다음시간에는 위의 과정을 잘 구조화해놓은
          p <b> express </b>라는 프레임워크를 활용해서
          p 실습을 해 볼 예정입니다.
          p.fragment 즉, 다음시간엔 남들이 이미 잘 만들어놓은 도구를 활용할 것이기 때문에 더 쉬울 수 있어요
        section
          p 감사합니다


    script(src="/reveal/lib/js/head.min.js")
    script(src="/reveal/js/reveal.js")
    script(src='/reveal_config.js')
